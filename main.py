import telebot
from telebot import types
from datetime import datetime
import config

bot = telebot.TeleBot(config.BOT_TOKEN)

laundry_queue = {
    "4": [],
    "6": []
}

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    button_floor4 = types.InlineKeyboardButton("üè¢ 4 –ø–æ–≤–µ—Ä—Ö", callback_data="floor4")
    button_floor6 = types.InlineKeyboardButton("üè¢ 6 –ø–æ–≤–µ—Ä—Ö", callback_data="floor6")
    button_view_queue = types.InlineKeyboardButton("üìù –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —á–µ—Ä–≥—É", callback_data="view_queue")
    markup.add(button_floor4, button_floor6, button_view_queue)

    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—Ä–∞–ª—å–Ω–∏—Ö –º–∞—à–∏–Ω. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['floor4', 'floor6'])
def choose_floor(call):
    floor = call.data[-1]
    markup = types.InlineKeyboardMarkup()
    button_machine1 = types.InlineKeyboardButton("‚ñ´Ô∏è–ü—Ä–∞–ª–∫–∞ ‚Ññ1", callback_data=f"machine1_{floor}")
    button_machine2 = types.InlineKeyboardButton("‚ñ´Ô∏è–ü—Ä–∞–ª–∫–∞ ‚Ññ2", callback_data=f"machine2_{floor}")
    markup.add(button_machine1, button_machine2)

    bot.send_message(call.message.chat.id, f"üìå–í–∏ –æ–±—Ä–∞–ª–∏ {floor}-–π –ø–æ–≤–µ—Ä—Ö. –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–ª—å–Ω—É –º–∞—à–∏–Ω—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('machine'))
def choose_machine(call):
    data = call.data.split('_')
    machine = data[0][-1]
    floor = data[1]
    bot.send_message(call.message.chat.id, f"üìå–í–∏ –æ–±—Ä–∞–ª–∏ {machine}-—É –ø—Ä–∞–ª—å–Ω—É –º–∞—à–∏–Ω—É –Ω–∞ {floor}-–º—É –ø–æ–≤–µ—Ä—Å—ñ. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –∫—ñ–º–Ω–∞—Ç–∏.")
    bot.register_next_step_handler(call.message, process_room, floor=floor, machine=machine)

def process_room(message, floor, machine):
    room = message.text
    username = message.from_user.username
    time_now = datetime.now().strftime("%d-%m-%Y %H:%M")

    laundry_queue[floor].append({
        "room": room,
        "username": username,
        "time": time_now,
        "machine": machine
    })

    markup = types.InlineKeyboardMarkup()
    button_view_queue = types.InlineKeyboardButton("üìù –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —á–µ—Ä–≥—É", callback_data="view_queue")
    button_remove = types.InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–±–µ –∑ —á–µ—Ä–≥–∏", callback_data=f"remove_{floor}")
    markup.add(button_view_queue, button_remove)

    bot.send_message(message.chat.id,
                     f"‚úÖ–í–∞—Å –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –Ω–∞ {floor}-–º—É –ø–æ–≤–µ—Ä—Å—ñ, –ü—Ä–∞–ª–∫–∞ ‚Ññ{machine}. –í–∞—à –Ω—ñ–∫–Ω–µ–π–º: @{username}, –∫—ñ–º–Ω–∞—Ç–∞: {room}, üïí—á–∞—Å: {time_now}",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'view_queue')
def show_queue(call):
    queue_text = ""

    for floor, queue in laundry_queue.items():
        if queue:
            queue_text += f"\n‚¨áÔ∏è –ß–µ—Ä–≥–∞ –Ω–∞ {floor}-–º—É –ø–æ–≤–µ—Ä—Å—ñ:\n"
            queue_text += "\n".join(
                [f"{idx + 1}. ‚ñ´Ô∏è–ö—ñ–º–Ω–∞—Ç–∞: {entry['room']}, @{entry['username']}, –ü—Ä–∞–ª–∫–∞ ‚Ññ{entry['machine']}, üïí–ß–∞—Å: {entry['time']}"
                 for idx, entry in enumerate(queue)])
        else:
            queue_text += f"\n‚¨áÔ∏è –ß–µ—Ä–≥–∞ –Ω–∞ {floor}-–º—É –ø–æ–≤–µ—Ä—Å—ñ –ø–æ—Ä–æ–∂–Ω—è.\n"

    bot.send_message(call.message.chat.id, queue_text)

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_'))
def remove_from_queue(call):
    floor = call.data.split('_')[1]
    username = call.from_user.username

    for entry in laundry_queue[floor]:
        if entry['username'] == username:
            laundry_queue[floor].remove(entry)
            bot.send_message(call.message.chat.id, "‚ùå –í–∞—Å –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–µ—Ä–≥–∏.")
            return

    bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í–∞—Å –Ω–µ–º–∞—î —É —á–µ—Ä–∑—ñ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('done_'))
def mark_done(call):
    floor = call.data.split('_')[1]
    username = call.from_user.username

    bot.send_message(call.message.chat.id, "‚ö†Ô∏è –í–∞—Å –Ω–µ–º–∞—î —É —á–µ—Ä–∑—ñ.")

bot.polling()
